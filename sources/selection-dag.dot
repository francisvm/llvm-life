digraph "dag-combine1 input for foo:entry" {
	rankdir="BT";
	label="dag-combine1 input for foo:entry";

	Node0x3f8d2b0 [shape=record,shape=Mrecord,label="{EntryToken|t0|{<d0>ch}}"];
	Node0x3fdee50 [shape=record,shape=Mrecord,label="{Register %vreg0|t1|{<d0>i32}}"];
	Node0x3fdeec0 [shape=record,shape=Mrecord,label="{{<s0>0|<s1>1}|CopyFromReg|t2|{<d0>i32|<d1>ch}}"];
	Node0x3fdeec0:s0 -> Node0x3f8d2b0:d0[color=blue,style=dashed];
	Node0x3fdeec0:s1 -> Node0x3fdee50:d0;
	Node0x3fdef30 [shape=record,shape=Mrecord,label="{Register %vreg1|t3|{<d0>i32}}"];
	Node0x3fdefa0 [shape=record,shape=Mrecord,label="{{<s0>0|<s1>1}|CopyFromReg|t4|{<d0>i32|<d1>ch}}"];
	Node0x3fdefa0:s0 -> Node0x3f8d2b0:d0[color=blue,style=dashed];
	Node0x3fdefa0:s1 -> Node0x3fdef30:d0;
	Node0x3fdf010 [shape=record,shape=Mrecord,label="{{<s0>0|<s1>1}|add|t5|{<d0>i32}}"];
	Node0x3fdf010:s0 -> Node0x3fdeec0:d0;
	Node0x3fdf010:s1 -> Node0x3fdefa0:d0;
	Node0x3fdf080 [shape=record,shape=Mrecord,label="{TargetConstant\<0\>|t6|{<d0>i32}}"];
	Node0x3fdf0f0 [shape=record,shape=Mrecord,label="{Register %EAX|t7|{<d0>i32}}"];
	Node0x3fdf160 [shape=record,shape=Mrecord,label="{{<s0>0|<s1>1|<s2>2}|CopyToReg|t8|{<d0>ch|<d1>glue}}"];
	Node0x3fdf160:s0 -> Node0x3f8d2b0:d0[color=blue,style=dashed];
	Node0x3fdf160:s1 -> Node0x3fdf0f0:d0;
	Node0x3fdf160:s2 -> Node0x3fdf010:d0;
	Node0x3fdf1d0 [shape=record,shape=Mrecord,label="{{<s0>0|<s1>1|<s2>2|<s3>3}|X86ISD::RET_FLAG|t9|{<d0>ch}}"];
	Node0x3fdf1d0:s0 -> Node0x3fdf160:d0[color=blue,style=dashed];
	Node0x3fdf1d0:s1 -> Node0x3fdf080:d0;
	Node0x3fdf1d0:s2 -> Node0x3fdf0f0:d0;
	Node0x3fdf1d0:s3 -> Node0x3fdf160:d1[color=red,style=bold];
	Node0x0[ plaintext=circle, label ="GraphRoot"];
	Node0x0 -> Node0x3fdf1d0:d0[color=blue,style=dashed];
}
